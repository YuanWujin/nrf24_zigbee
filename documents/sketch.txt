
MAC Layer笔记：

1.【Active Scan】
在进行active scan的时候，mac层需要先保存自己的 macPANId，然后在扫描阶段一直设置自己的panId 为0xffff，扫描结束后再恢复原来的panid，这样做的目的是让mac层尽可能接收到当前无线环境下所有的信标，而不是仅仅是自己所在PAN的信标。
开始进行active scan，需要根据scan_request输入的channel参数选择切换到对应的一个或多个channel，然后构造MAC层的信标请求命令帧，参考IEEE 802.15.4的7.3.7节，信标请求命令帧由 7byte MHR field + 1byte 命令帧标识符组成。
在MHR中，FrameControl区域的Destination Addressing Mode需要设置成0x02（表示16位短地址），Source Addressing Mode需要设置成0x00，表示源地址位未设置。 目标PANId域需要设置成0xffff,目标地址域也需要设置成0xffff。命令帧标识符需要设置成0x07（Beacon Request）。
【这里放一张MAC command frame的表格，参见 IEEE 149页】
【active scan资料 参考 IEEE 7.5.2.1.2 Active channel scan】

active scan对于coord来说
If a coordinator of a beacon-enabled PAN receives the beacon request command, it shall ignore the
command and continue transmitting its periodic beacons as usual. If a coordinator of a nonbeacon-enabled PAN receives this command, it shall transmit a single beacon frame using unslotted CSMA-CA。

2.【NWK discovery Request & Confirm】
nwk discovery首先进行activescan，然后会在一定时间内持续接受beacon-notify-indication，从beacon中提取出周围的网络信息。
收到beacon-request command的coord会打包本机的mac_beacon_payload，通过信标帧广播出去。mac_beacon_payload存储在mac层的PIB属性列表中，当coord在执行formation-request时需要根据自身信息填充该payload，同样的当deivce在join一个网络后也需要立即更新这个表。

	typedef struct __mac_beacon_payload_handle {
	  uint8_t protocal_id:8;
	  uint8_t stack_profile:4;
	  uint8_t nwk_protocal_version:4;
	  uint8_t reserved:2;
	  uint8_t router_capacity:1;
	  uint8_t device_depth:4;
	  uint8_t end_device_capacity:1;
	  uint8_t nwk_extended_panid[8];
	  uint8_t tx_offset[3];
	  uint8_t nwk_update_id;
	} mac_beacon_payload_handle; 
（其中end_device_capacity等价于下面的）


收到beacon的设备首先检测protocol_id是否是zigbee protocal，然后会从beacon payload中提取需要的信息存储到如下neighbour_table_handle中。

	typedef struct __neighbour_table_handle {
	  uint8_t extended_addr[8];//unique IEEE addr
	  uint16_t nwk_addr;
	  uint8_t device_type:2;
	  uint8_t rx_on_when_idle:1;
	  uint8_t relationship:3;
	  uint8_t transmit_failure;
	  uint8_t lqi;
	  uint8_t outgoing_cost;
	  uint8_t age;
	} neighbour_table_handle;

并且如果当前设备正在进行discovery任务，那么将会从beacon frame中提取出network_descriptor_handle的信息并以discovery_confirm的形式返回到NWK上一级。注意network_descriptor_handle中的permit_joining字段等价于mac_beacon_payload中的end_device_capacity。

	typedef struct __network_descriptor_handle {
	  uint8_t extended_panid[8];
	  uint8_t logical_channel; 
	  uint8_t stack_profile:4;
	  uint8_t zigbee_version:4;
	  uint8_t beacon_order:4;
	  uint8_t superframe_order:4;
	  uint8_t permit_joining:1;
	  uint8_t router_capacity:1;
	  uint8_t end_device_capacity:1;
	} network_descriptor_handle;

在Zigbee协议的nwk layer定义中，nlme_discovery_confirm返回的参数是status，network_count,network_descirptors，这里为了编程上方便同时节省内存空间，将nwk_count和nwk_descirptors整合到全局共享的nwk_descriptors_fifo中，这个带互斥锁机制的fifo由nwk layer和apl layer共享，所以nlme_discovery_confirm只需要返回scan的status即可。

不同版本的avr-gcc编译器 编译出来的程序固件差异不小
使用1.8.5版本编译器  3584字节，(43%)的动态内存
使用1.6.8版本编译器  4416字节，(53%)的动态内存











